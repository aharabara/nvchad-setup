#!/bin/bash

# Function to pretty-print JSON or return the original string
pretty_print_json() {
  local input="$1"
  echo "$input" | jq . 2>/dev/null || echo "$input"
}

# Function to list and display secrets, with options to edit or delete
list_secrets() {
  # Fetch all secret names from AWS Secrets Manager
  SECRET_NAMES=$(aws secretsmanager list-secrets --query "SecretList[].Name" --output text)

  # Convert secret names into a newline-separated list
  SECRET_LIST=$(echo "$SECRET_NAMES" | tr '\t' '\n')

  # Use gum to create a filterable menu for selecting a secret
  SELECTED_SECRET=$(echo "$SECRET_LIST" | gum filter --placeholder "Select a secret")

  # If no secret is selected, exit the function
  if [ -z "$SELECTED_SECRET" ]; then
    echo "No secret selected. Exiting." | gum style --foreground 212
    return
  fi

  # Fetch the secret value
  SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "$SELECTED_SECRET" --query "SecretString" --output text)

  # Format the secret value (pretty-print if JSON, else show as is)
  FORMATTED_VALUE=$(pretty_print_json "$SECRET_VALUE")

  # Display the secret value using gum
  echo "Secret Name: $SELECTED_SECRET" | gum style --bold --foreground 33
  echo "Secret Value:" | gum style --bold --foreground 33
  echo "$FORMATTED_VALUE" | gum style --border normal --padding "1 2" --margin "1" --width 120

  # Offer options to edit or delete the secret
  ACTION=$(gum choose "Edit" "Delete" "Cancel")

  case $ACTION in
    "Edit")
      edit_secret "$SELECTED_SECRET" "$SECRET_VALUE"
      ;;
    "Delete")
      delete_secret "$SELECTED_SECRET"
      ;;
    "Cancel")
      echo "Operation cancelled." | gum style --foreground 212
      ;;
    *)
      echo "Invalid option. Exiting." | gum style --foreground 160
      ;;
  esac
}

# Function to edit a secret
edit_secret() {
  SECRET_NAME="$1"
  CURRENT_VALUE="$2"

  # Prompt for new secret value
  NEW_VALUE=$(gum input --value "$CURRENT_VALUE" --placeholder "Enter new secret value (JSON supported)")

  # If no new value is entered, exit the function
  if [ -z "$NEW_VALUE" ]; then
    echo "No new value entered. Exiting." | gum style --foreground 212
    return
  fi

  # Update the secret using AWS CLI
  aws secretsmanager update-secret --secret-id "$SECRET_NAME" --secret-string "$NEW_VALUE"

  echo "Secret '$SECRET_NAME' updated successfully." | gum style --bold --foreground 76
}

# Function to delete a secret
delete_secret() {
  SECRET_NAME="$1"

  # Confirm deletion
  CONFIRM_DELETE=$(gum confirm "Are you sure you want to delete '$SECRET_NAME'?")

  if $CONFIRM_DELETE; then
    aws secretsmanager delete-secret --secret-id "$SECRET_NAME" --force-delete-without-recovery
    echo "Secret '$SECRET_NAME' deleted successfully." | gum style --bold --foreground 76
  else
    echo "Deletion cancelled." | gum style --foreground 212
  fi
}

# Function to create a new secret
create_secret() {
  # Prompt for secret name
  SECRET_NAME=$(gum input --placeholder "Enter secret name")

  # If no secret name is entered, exit the function
  if [ -z "$SECRET_NAME" ]; then
    echo "No secret name entered. Exiting." | gum style --foreground 212
    return
  fi

  # Prompt for secret value
  SECRET_VALUE=$(gum input --placeholder "Enter secret value (JSON supported)")

  # If no secret value is entered, exit the function
  if [ -z "$SECRET_VALUE" ]; then
    echo "No secret value entered. Exiting." | gum style --foreground 212
    return
  fi

  # Create the secret using AWS CLI
  aws secretsmanager create-secret --name "$SECRET_NAME" --secret-string "$SECRET_VALUE"

  echo "Secret '$SECRET_NAME' created successfully." | gum style --bold --foreground 76
}

# Main script menu
while true; do
  ACTION=$(gum choose "List and Manage Secrets" "Create New Secret" "Exit")

  case $ACTION in
    "List and Manage Secrets")
      list_secrets
      ;;
    "Create New Secret")
      create_secret
      ;;
    "Exit")
      echo "Exiting." | gum style --foreground 212
      break
      ;;
    *)
      echo "Invalid option. Exiting." | gum style --foreground 160
      break
      ;;
  esac
done
