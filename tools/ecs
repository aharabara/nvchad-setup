#!/bin/bash

PROFILE=$(gum choose $(aws configure list-profiles))
export AWS_PROFILE="$PROFILE"
SHELL=$1

SSO_ACCOUNT=$(gum spin --title="Checking your session" -- aws sts get-caller-identity --query "Account")

set -e

#you can add a better check, but this is just an idea for quick check
if [ ${#SSO_ACCOUNT} -eq 14 ];  then 
    gum style --foreground 118 "[x] Session still valid." ;
else 
    gum style --foreground 208 "[X] Session still valid." ;
    # performed login here
    aws sso login 
fi

# TODO: Add possibility to associate service with specific domain and wite this data to /etc/hosts

# Function to select an option or auto-select if only one option is available
select_or_auto() {
    local options=$1
    local title=$2
    local selected_option

    if [ $(echo "$options" | wc -l) -eq 1 ]; then
        echo "$options"
    else
        echo $(gum choose $options)
    fi
}

# Function to check execute command capability and redeploy if necessary
check_and_redeploy() {
    local cluster=$1
    local service=$2
    local task=$3
    
    # Describe task to get task definition ARN
    task_def_arn=$(aws ecs describe-tasks --cluster $cluster --tasks $task --query "tasks[0].taskDefinitionArn" --output text)

    # Describe task definition
    task_def=$(gum spin --title="Fetch task definition of the '$cluster/$service' service..." -- aws ecs describe-task-definition --task-definition $task_def_arn)
    
    # Check if execute command capability is enabled
    exec_enabled=$(aws ecs describe-services --services $service --cluster $cluster | jq -r '.services[0].enableExecuteCommand // "false"')

    if [ "$exec_enabled" == "false" ]; then
       if gum confirm "Cannot connect. Redeploy with 'execute-command' capability?"; then
            gum spin --title="Initiate deployment" -- aws ecs update-service --cluster $cluster --service $service --task-definition $task_def_arn --enable-execute-command --force-new-deployment
        else
            gum style --foreground=221 "[!] Cannot connect to container, because service '$service' doesn't support 'execute-command' capability."
            exit 1;
        fi

        gum spin --title="Wait till deplyiment of '$service' service is done..." -- aws ecs wait services-stable --cluster $cluster --services $service
    fi
}

# Get clusters
CLUSTERS=$(gum spin --title="Get clusters" -- aws ecs list-clusters --query="clusterArns" | jq -r ".[]")
CLUSTER=$(select_or_auto "$CLUSTERS" "Selected cluster")

# Get services for the selected cluster
SERVICES=$(gum spin --title="Get services for cluster '$CLUSTER'" -- aws ecs list-services --cluster=$CLUSTER --query="serviceArns" | jq -r ".[]")
SERVICE=$(select_or_auto "$SERVICES" "Selected service")

# Get tasks for the selected service in the selected cluster
TASKS=$(gum spin --title="Get tasks for service '$SERVICE' in cluster '$CLUSTER'" -- aws ecs list-tasks --cluster=$CLUSTER --service-name=$SERVICE --query="taskArns" | jq -r ".[]")
TASK=$(select_or_auto "$TASKS" "Selected task")

# Check if execute command is enabled and redeploy if necessary
check_and_redeploy $CLUSTER $SERVICE $TASK

# Get tasks for the selected service in the selected cluster
TASKS=$(gum spin --title="Get tasks for service '$SERVICE' in cluster '$CLUSTER'" -- aws ecs list-tasks --cluster=$CLUSTER --service-name=$SERVICE --query="taskArns" | jq -r ".[]")
TASK=$(select_or_auto "$TASKS" "Selected task")
    

# Get containers for the selected task
CONTAINERS=$(gum spin --title="Fetch containers for task '$TASK'" -- aws ecs describe-tasks --cluster=$CLUSTER --tasks="$TASK" | jq -r ".tasks[0].containers[].name")
CONTAINER=$(select_or_auto "$CONTAINERS" "Selected container")

# Execute command in the selected container
aws ecs execute-command --cluster $CLUSTER --task $TASK --container $CONTAINER --interactive --command "${SHELL:-bash}"


